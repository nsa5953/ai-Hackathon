import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit"
import { RootState, AppThunk } from "../../app/store"
import { fetchData } from "./fileUploadAPI"

export interface FileUploadState {
  status: "idle" | "loading" | "failed"
  rows: any,
  graphDataXAxis: any
  graphDataYAxis: any
}

const initialState: FileUploadState = {
  status: "idle",
  rows:[],
  graphDataXAxis: [],
  graphDataYAxis:  []
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchFileUploadData = createAsyncThunk(
  "FileUpload/fetchData",
  async ({ files }: { files: any }) => {
    const response = await fetchData(files)
    // The value we return becomes the `fulfilled` action payload
    return response
  },
)

export const FileUploadSlice = createSlice({
  name: "FileUpload",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    setXaxisData: (state, action: PayloadAction<any>) => {
      state.graphDataXAxis = action.payload
    },
    setYaxisData: (state, action: PayloadAction<any>) => {
      state.graphDataYAxis = action.payload
    },

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchFileUploadData.pending, (state) => {
        state.status = "loading"
      })
      .addCase(fetchFileUploadData.fulfilled, (state, action) => {
        state.status = "idle"
        state.rows = action.payload
      })
      .addCase(fetchFileUploadData.rejected, (state) => {
        state.status = "failed"
      })
  },
})

export const { setXaxisData, setYaxisData } = FileUploadSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`


export default FileUploadSlice.reducer
