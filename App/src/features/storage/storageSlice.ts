import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit"
import { RootState, AppThunk } from "../../app/store"
import { readStorage } from "./storageAPI"

export interface StorageState {
  status: "idle" | "loading" | "failed"
  data: any,
  files: any
}

const initialState: StorageState = {
  status: "idle",
  data:null,
  files: null
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchStorageData = createAsyncThunk(
  "Storage/fetchData",
  async () => {
    const response = await readStorage()
    // The value we return becomes the `fulfilled` action payload
    return response
  },
)

export const StorageSlice = createSlice({
  name: "Storage",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`


  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchStorageData.pending, (state) => {
        state.status = "loading"
      })
      .addCase(fetchStorageData.fulfilled, (state, action) => {
        state.status = "idle"
        state.data = action.payload
      })
      .addCase(fetchStorageData.rejected, (state) => {
        state.status = "failed"
      })
  },
})

export const { } = StorageSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectStorage = (state: RootState) => state.storage.data
export const selectStorageFiles = (state: RootState) => state.storage.data?.files[0]

export default StorageSlice.reducer
